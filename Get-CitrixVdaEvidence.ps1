<#
https://www.mandiant.com/resources/blog/session-hijacking-citrix-cve-2023-4966
According to the information from Mandiant, you can correlate the Netscaler log files with the Citrix VDA evidence to see if there were any potentially compromised sessions.
This script uses the ActiveDirectory PowerShell module to get all Citrix server (you need to modify line 10) computer objects. It will then use PowerShell remoting to connect to all of them and
read the required data from the registry. The output will be written to $($env:TEMP)\CitrixSessionEvidence.csv
#>


# You will need to change this and write a query that results in all your citrix servers
$vdas = Get-ADComputer -SearchBase "OU=Server-VDA,DC=my-domain,DC=local" -Filter *

$VdaRegInfos = New-Object System.Collections.ArrayList

#region get registry infos from Citrix VDAs (using PSRemoting)
Foreach ($v in $vdas) {
    Write-Host "[*] Reading registry of $($v.DNSHostName) for Citrix Session Evidence"
    try {
        $items = @(Invoke-Command -ComputerName $v.DNSHostName -ScriptBlock {
            $BaseRegKey = "HKLM:\SOFTWARE\Policies\Citrix"
            foreach ($i in @(dir $BaseRegKey)) {
                if ($i.Name -match '.*\\\d.$') {
                    $id = $i.Name.Split('\')[-1]
                    $x64Key = "$($BaseRegKey)\$($id)"
                    $x86Key = "HKLM:\SOFTWARE\WOW6432Node\Policies\Citrix\$($id)"
                    $x64Evidence = (Get-ItemProperty -Path "$($x64Key)\Evidence\")
                    $x86Evidence = (Get-ItemProperty -Path "$($x86Key)\Evidence\")
                    $x86Events = (Get-ItemProperty -Path "$($x86Key)\Events\")
                    $OutObj = New-Object PSCustomObject
                    $OutObj | Add-Member -MemberType NoteProperty -Name ServerName -Value $env:COMPUTERNAME
                    $OutObj | Add-Member -MemberType NoteProperty -Name ClientName -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name ClientIp -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name BrokeringUserSid -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name BrokeringUserName -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name LastUpdate -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name ClientName2 -Value $null
                    $OutObj | Add-Member -MemberType NoteProperty -Name SessionId -value $i
                        
                    try {$outobj.ClientName = $x64Evidence.ClientName} catch {}
                    try {$outobj.ClientIp = $x64Evidence.ClientIp} catch {}
                    try {$outobj.BrokeringUserSid = $x64Evidence.BrokeringUserSid} catch {}
                    try {$outobj.ClientName2 = $x86Evidence.ClientName} catch {}
                    try {$outobj.LastUpdate = $x86Events.LastUpdate} catch {}

                    Write-Output $OutObj
                }
            }
        } -ErrorAction Stop)
        Foreach ($i in $items) {
            [void]$VdaRegInfos.Add($i)
        }
    } catch {
        $Error[0]
    }
}
#endregion get registry infos from Citrix VDAs (using PSRemoting)

#region get usernames from BrokeringUserSid
Foreach ($item in $VdaRegInfos) {
    if ($item.BrokeringUserSid -ne $null) {
        try {
            $item.BrokeringUserName = (Get-ADUser -Identity $item.BrokeringUserSid -ErrorAction Stop).UserPrincipalName
        } catch {}
    }
}
#endregion get usernames from BrokeringUserSid

$VdaRegInfos | Export-Csv -Path "$($env:TEMP)\CitrixSessionEvidence.csv" -NoClobber -NoTypeInformation -Force
$VdaRegInfos | ogv
